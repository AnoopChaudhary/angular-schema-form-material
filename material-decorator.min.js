angular.module("schemaForm").run(["$templateCache",function(e){e.put("decorators/material/actions-trcl.html",'<div class="btn-group schema-form-actions {{form.htmlClass}}" ng-transclude=""></div>'),e.put("decorators/material/actions.html",'<div class="btn-group schema-form-actions {{form.htmlClass}}"><input ng-repeat-start="item in form.items" type="submit" class="btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}" value="{{item.title}}" ng-if="item.type === \'submit\'"> <button ng-repeat-end="" class="btn {{ item.style || \'btn-default\' }} {{form.fieldHtmlClass}}" type="button" ng-disabled="form.readonly" ng-if="item.type !== \'submit\'" ng-click="buttonClick($event,item)">{{item.title}}</button></div>'),e.put("decorators/material/array.html",'<div sf-array="form" class="schema-form-array {{form.htmlClass}}" ng-model="$$value$$" ng-model-options="form.ngModelOptions"><h3 ng-show="form.title && form.notitle !== true">{{ form.title }}</h3><ol class="list-group" ng-model="modelArray" ui-sortable=""><li class="list-group-item {{form.fieldHtmlClass}}" ng-repeat="item in modelArray track by $index"><md-button ng-hide="form.readonly || form.remove === null" ng-click="deleteFromArray($index)" style="position: relative; z-index: 20;" type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></md-button><sf-decorator ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator></li></ol><div class="clearfix" style="padding: 15px;"><md-button ng-hide="form.readonly || form.add === null" ng-click="appendToArray()" type="button" class="btn {{ form.style.add || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</md-button></div><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/autocomplete.html",'<div class="form-group {{form.htmlClass}} schema-form-select" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><md-autocomplete flex="" ng-disabled="form.readonly" ng-model="$$value$$" sf-autocomplete="" sf-field-model="replaceAll" schema-validate="form" md-selected-item="$$value$$" md-search-text="searchText" md-selected-item-change="\'todo\';" md-items="item in evalExpr(\'this[\\\'\'+form.optionFilter+\'\\\'](\\\'\'+searchText+\'\\\')\')" md-item-text="item.name" md-floating-label="{{form.title || form.key.slice(-1)[0]}}" md-menu-class="autocomplete-custom-template"><md-item-template><span md-highlight-text="searchText">{{item.title}}</span></md-item-template><md-not-found>No matches found</md-not-found></md-autocomplete><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/checkbox.html",'<div class="checkbox schema-form-checkbox {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><md-checkbox sf-field-model="" sf-changed="form" ng-disabled="form.readonly" schema-validate="form" class="{{form.fieldHtmlClass}}" name="{{form.key.slice(-1)[0]}}" aria-label="{{form.title || form.key.slice(-1)[0]}}"><span ng-bind-html="form.title"></span></md-checkbox><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/checkboxes.html",'<div sf-array="form" sf-field-model="" class="form-group schema-form-checkboxes {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="checkbox" ng-repeat="val in titleMapValues track by $index"><md-checkbox ng-model="titleMapValues[$index]" sf-changed="form" ng-disabled="form.readonly" name="{{form.key.slice(-1)[0]}}" ng-true-value="true" ng-false-value="false" aria-label="{{form.title || form.key.slice(-1)[0]}}"><span ng-bind-html="form.titleMap[$index].name"></span></md-checkbox></div><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/chips.html",'<div class="form-group schema-form-chips {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><md-chips sf-field-model="" readonly="form.readonly" flex="" placeholder="{{form.title || form.key.slice(-1)[0]}}"><md-chip-template><strong ng-if="!form.template">{{$chip}}</strong></md-chip-template></md-chips><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/date.html",'<md-input-container class="schema-form-date {{form.htmlClass}}"><md-datepicker sf-field-model="" sf-changed="form" sf-type-parser="form.schema" schema-validate="form" id="{{form.key.slice(-1)[0]}}" ng-show="form.key" ng-class="form.fieldHtmlClass" ng-disabled="form.readonly" md-min-date="minDate" md-max-date="maxDate" md-placeholder="Enter date"><label ng-show="showTitle()" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></md-datepicker></md-input-container>'),e.put("decorators/material/default.html",'<md-input-container class="schema-form-{{form.type}} {{form.htmlClass}}" sf-messages=""><label ng-show="showTitle()" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label><input sf-field-model="" ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" id="{{form.key.slice(-1)[0]}}" ng-class="form.fieldHtmlClass" sf-type-parser="form.schema" ng-disabled="form.readonly" schema-validate="form" name="{{form.key.slice(-1)[0]}}" aria-describedby="{{form.key.slice(-1)[0] + \'Status\'}}"></md-input-container>'),e.put("decorators/material/fieldset-trcl.html",'<fieldset ng-disabled="form.readonly" class="standard {{form.htmlClass}}" flex=""><legend ng-show="form.title">{{ form.title }}</legend><div ng-transclude=""></div></fieldset>'),e.put("decorators/material/fieldset.html",'<fieldset ng-disabled="form.readonly" class="standard {{form.htmlClass}}" flex=""><legend ng-show="form.title">{{ form.title }}</legend></fieldset>'),e.put("decorators/material/help.html",'<div class="helpvalue schema-form-helpvalue {{form.htmlClass}}" ng-bind-html="form.helpvalue"></div>'),e.put("decorators/material/radio-buttons.html",'<div class="form-group schema-form-radiobuttons {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><div><label class="control-label" ng-show="showTitle()">{{form.title}}</label></div><section layout="row" layout-sm="column" layout-align="center center"><md-input-container ng-repeat="item in form.titleMap"><md-button type="button" class="group md-raised" sf-field-model="replaceAll" ng-model="$$value$$" sf-changed="form" ng-class="{\'md-primary\': ($$value$$ == item.value)}" ng-disabled="form.readonly" ng-model-options="form.ngModelOptions" schema-validate="form" ng-value="item.value" ng-click="$$value$$ = item.value" name="{{form.key.join(\'.\')}}"><span ng-bind-html="item.name"></span></md-button></md-input-container></section><div class="help-block" sf-message="form.description"></div></div>'),e.put("decorators/material/radios-inline.html",'<div class="form-group schema-form-radios-inline {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><md-radio-group layout="row" sf-field-model="replaceAll" ng-model="$$value$$" class="{{form.fieldHtmlClass}}" ng-class="{ active: item.value === $$value$$ }" sf-changed="form" schema-validate="form" ng-disabled="form.readonly" name="{{form.key.join(\'.\')}}"><md-radio-button ng-repeat="item in form.titleMap" ng-value="item.value"><span ng-bind-html="item.name"></span></md-radio-button></md-radio-group><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/radios.html",'<div class="form-group schema-form-radios {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()" aria-label="{{form.title}}">{{form.title}} {{form.titleMap | json}}</label><md-radio-group sf-field-model="" sf-changed="form" ng-disabled="form.readonly" name="{{form.key.join(\'.\')}}"><md-radio-button ng-repeat="item in form.titleMap" ng-value="item.value" class="{{form.fieldHtmlClass}}" sf-field-model="ng-class" ng-class="{ active: item.value === $$value$$ }"><span ng-bind-html="item.name"></span></md-radio-button></md-radio-group><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></div>'),e.put("decorators/material/section.html",'<div class="schema-form-section {{form.htmlClass}}"></div>'),e.put("decorators/material/select.html",'<md-input-container class="form-group {{form.htmlClass}} schema-form-select" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><label ng-show="showTitle()">{{form.title}}</label><md-select sf-field-model=""><md-optgroup ng-repeat-start="(key, opt) in form.titleMap | orderBy:\'group\' as optGroups" ng-if="opt.group && opt.group != optGroups[key-1].group" label="{{opt.group}}"><md-option ng-repeat="(key, filtered) in form.titleMap | filter: {group: opt.group} | orderBy:\'name\' as opts" ng-value="filtered.value">{{filtered.name}}</md-option></md-optgroup><md-option ng-repeat-end="" ng-if="!opt.group" ng-value="opt.value">{{opt.name}}</md-option></md-select><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></md-input-container>'),e.put("decorators/material/submit.html",'<section class="schema-form-submit {{form.htmlClass}}"><md-button class="md-raised {{ form.style || \'md-primary\' }} {{form.fieldHtmlClass}}" ng-disabled="form.readonly">{{form.title}}</md-button></section>'),e.put("decorators/material/switch.html",'<md-input-container class="schema-form-switch {{form.htmlClass}}"><md-switch sf-field-model="" sf-changed="form" sf-type-parser="form.schema" schema-validate="form" id="{{form.key.slice(-1)[0]}}" aria-label="{{form.title}}" ng-true-value="\'yup\'" ng-false-value="\'nope\'" ng-show="form.key" ng-class="form.fieldHtmlClass" ng-disabled="form.readonly"><label ng-show="showTitle()" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></md-switch></md-input-container>'),e.put("decorators/material/tabarray.html",'<div sf-array="form" ng-init="selected = { tab: 0 }" class="clearfix schema-form-tabarray schema-form-tabarray-{{form.tabType || \'left\'}} {{form.htmlClass}}"><div ng-if="!form.tabType || form.tabType !== \'right\'" ng-class="{\'col-xs-3\': !form.tabType || form.tabType === \'left\'}"><ul class="nav nav-tabs" ng-class="{ \'tabs-left\': !form.tabType || form.tabType === \'left\'}"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || (selected.tab = appendToArray().length - 1)"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div><div ng-class="{\'col-xs-9\': !form.tabType || form.tabType === \'left\' || form.tabType === \'right\'}"><div class="tab-content {{form.fieldHtmlClass}}"><div class="tab-pane clearfix" ng-repeat="item in modelArray track by $index" ng-show="selected.tab === $index" ng-class="{active: selected.tab === $index}"><sf-decorator ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator><button ng-hide="form.readonly" ng-click="selected.tab = deleteFromArray($index).length - 1" type="button" class="btn {{ form.style.remove || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-trash"></i> {{ form.remove || \'Remove\'}}</button></div></div></div><div ng-if="form.tabType === \'right\'" class="col-xs-3"><ul class="nav nav-tabs tabs-right"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{interp(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || appendToArray()"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div></div>'),e.put("decorators/material/tabs.html",'<div sf-field-model="" class="schema-form-tabs {{form.htmlClass}}"><md-tabs md-dynamic-height="" md-selected="selected" md-autoselect="" ng-init="selected = 0"></md-tabs></div>'),e.put("decorators/material/textarea.html",'<md-input-container class="{{form.htmlClass}} schema-form-textarea"><label ng-show="showTitle()" for="{{form.key.slice(-1)[0]}}">{{form.title}}</label> <textarea ng-class="form.fieldHtmlClass" id="{{form.key.slice(-1)[0]}}" sf-changed="form" ng-disabled="form.readonly" sf-field-model="" schema-validate="form" name="{{form.key.slice(-1)[0]}}"></textarea><div ng-messages="ngModel.$error"><div sf-message="" ng-message=""></div></div></md-input-container>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfBuilderProvider","sfPathProvider","$injector",function(e,t,a,s,l){var r="decorators/material/",o=a.builders.simpleTransclusion,m=a.builders.ngModelOptions,i=a.builders.ngModel,d=a.builders.sfField,n=a.builders.condition,c=a.builders.array,f=function(){var e='<div ng-if="ngModel.$invalid" ng-messages="ngModel.$error"><div sf-message ng-message></div></div>',t=document.createElement("div");return t.innerHTML=e,t.firstChild}(),g=function(e){var t=e.fieldFrag.querySelector("[sf-messages]");t&&f&&t.appendChild(f)},h=function(e){var t=e.fieldFrag.querySelector("[sf-autocomplete]");if(t){e.form.onChange&&t.setAttribute("md-selected-item-change","args.form.onChange(searchText)"),e.form.onChange&&t.setAttribute("md-search-text-change","args.form.onChange(searchText)");var a=e.form.minLength||1,s=e.form.maxLength||!1;t.setAttribute("md-min-length",a),s&&t.setAttribute("md-max-length",s)}},p=function(e){if(e.form.tabs&&e.form.tabs.length>0){var t=e.fieldFrag.querySelector("md-tabs");e.form.tabs.forEach(function(a,s){var l=document.createElement("md-tab");l.setAttribute("label","{{"+e.path+".tabs["+s+"].title}}");var r=document.createElement("md-tab-body"),o=e.build(a.items,e.path+".tabs["+s+"].items",e.state);r.appendChild(o),l.appendChild(r),t.appendChild(l)})}},u=[d,i,m,g,n];t.defineDecorator("materialDecorator",{actions:{template:r+"actions.html",builder:u},array:{template:r+"array.html",builder:[d,m,i,c,n]},autocomplete:{template:r+"autocomplete.html",builder:[d,i,m,g,n,h]},button:{template:r+"submit.html",builder:u},checkbox:{template:r+"checkbox.html",builder:u},checkboxes:{template:r+"checkboxes.html",builder:[d,m,i,c,n]},date:{template:r+"date.html",builder:u},"default":{template:r+"default.html",builder:u},fieldset:{template:r+"fieldset.html",builder:[d,o,n]},help:{template:r+"help.html",builder:u},number:{template:r+"default.html",builder:u},password:{template:r+"default.html",builder:u},radios:{template:r+"radios.html",builder:u},"radios-inline":{template:r+"radios-inline.html",builder:u},radiobuttons:{template:r+"radio-buttons.html",builder:u},section:{template:r+"section.html",builder:[d,o,n]},select:{template:r+"select.html",builder:u},submit:{template:r+"submit.html",builder:u},tabs:{template:r+"tabs.html",builder:[d,p,n]},tabarray:{template:r+"tabarray.html",builder:[d,m,i,c,n]},textarea:{template:r+"textarea.html",builder:u}});var b=function(t,a,l){if("string"===a.type&&("date"===a.format||"date-time"===a.format)){var r=e.stdFormObj(t,a,l);return r.key=l.path,r.type="date",l.lookup[s.stringify(l.path)]=r,r}};e.defaults.string.unshift(b)}]),angular.module("schemaForm").directive("sfTypeParser",function(){return{restrict:"A",scope:!1,require:"ngModel",link:function(e,t,a,s){var l=e.$watch(a.sfTypeParser,function(e){if(e){var t=-1!==e.type.indexOf("number"),a=-1!==e.type.indexOf("integer"),r=/^[0-9]*$/;(t||a)&&s.$parsers.push(function(e){var a;return t?a=parseFloat(e):r.test(e)&&(a=parseInt(e,10)),console.log("parser",r.test(e),e,a),void 0===a||isNaN(a)?e:a}),l()}})}}});